1) GIven an integer array, find out all the numbers starting with 1 using Stream functions.
 List<Integer> list=Arrays.asList(1,12,34,161);
 List<Integer> result= list.stream().filter(data->String.valueOf(data).startsWith("1")).collect(Collectors.toList());

2) Given a list of employees, sort the employee in reverse order by their salary using Java 8 Stream functions. Employee POJO: public class Employee{ String name; BigDecimal salary; LocalDate dateOfBirth; ....... }
List<Employee> employeeList=Arrays.asList(new Employee(),new Employee());
employeeList.stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).collect(Collectors.toList());

3) You have the below String, find number of occurance of each character using Java 8 Stream functions. Input: String s = "Welcome to the Java 8 world!";

     Map<Characters,Integr> mapCharCount=s.tocharArray().chars().maptoObject(ch->(char)ch).groupingBy(char->char,Collectors.counting);
mapCharCount.forEach((


4) You have the below list, sort it in reverse order using Stream functions. List<Double> decimalList = Arrays.asList(12.45, 23.58, 17.13, 42.89, 33.78, 71.85, 56.98, 21.12);

          List<Double> sortedList = decimalList.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());



5) You have the below integer variable, find the sum of all digits using Stream functions. int i = 2689345;
int sum = String.valueOf(i).chars().map(Character::getNumericValue).sum();
6) You have a list of objects, check if list is empty in Java 8 using Optional, if not null iterate through the list and print the object.
Optional<List<MyClass>> optionalList = Optional.ofNullable(myList);
        // Check if the list is present and iterate through it
        optionalList.ifPresent(list -> {
            System.out.println("List is not empty. Printing objects:");
            list.forEach(obj -> System.out.println("Object ID: " + obj.getId()));
        });

7) You have 2 list as below. Combine these list as a single list using Java 8 Stream functions and sort the combine list in reverse order. List<Integer>
 oddList = Arrays.asList(1,3,5,7,9,11); List<Integer> evenList = Arrays.asList(2,4,6,8,10);
 List<Integer> combinedSorted = Stream.concat(oddList.stream(), evenList.stream()).sorted((a,b)->b-a).collect(Collectors.toList());
8) You have List<Integer> listOfInteger = Arrays.asList(45, 12, 56, 15, 24, 75, 31, 89). Find 2nd highest number using Java 8 Stream functions.

  Integer sortedList = listOfInteger.stream().sorted((a, b) -> b - a).skip(1).findFirst().orElse(null);



